diff --git a/src/main/scala/Compiler.scala b/src/main/scala/Compiler.scala
index 9e6e60f..57215be 100644
--- a/src/main/scala/Compiler.scala
+++ b/src/main/scala/Compiler.scala
@@ -11,6 +11,7 @@ import firrtl.ir._
 import firrtl.options.Dependency
 import firrtl.stage.TransformManager.TransformDependency
 import firrtl.stage.transforms
+import scala.collection.mutable
 
 import logger._
 
@@ -20,6 +21,7 @@ class EssentEmitter(initialOpt: OptFlags, w: Writer, circuit: Circuit) extends L
   implicit val rn = new Renamer
   val actTrac = new ActivityTracker(w, initialOpt)
   val vcd = if (initialOpt.withVCD) Some(new Vcd(circuit,initialOpt,w,rn)) else None
+  private val usedNames = mutable.HashSet[String]()
   // Declaring Modules
   //----------------------------------------------------------------------------
   def declareModule(m: Module, topName: String) {
@@ -43,7 +45,9 @@ class EssentEmitter(initialOpt: OptFlags, w: Writer, circuit: Circuit) extends L
     w.writeLines(0, s"typedef struct $modName {")
     w.writeLines(1, registerDecs)
     w.writeLines(1, memDecs)
-    w.writeLines(1, m.ports flatMap emitPort(modName == topName))
+    val ports = m.ports flatMap emitPort(modName == topName)
+    ports foreach {x => usedNames.add(x.split(" ")(1).takeWhile(_ != ';'))}
+    w.writeLines(1, ports)
     w.writeLines(1, moduleDecs)
     w.writeLines(0, "")
     w.writeLines(1, s"$modName() {")
@@ -120,8 +124,12 @@ class EssentEmitter(initialOpt: OptFlags, w: Writer, circuit: Circuit) extends L
                           opt: OptFlags) {
     // predeclare part outputs
     val outputPairs = condPartWorker.getPartOutputsToDeclare()
-    val outputConsumers = condPartWorker.getPartInputMap()
-    w.writeLines(1, outputPairs map {case (name, tpe) => s"${genCppType(tpe)} ${rn.emit(name)};"})
+    val outputConsumers = condPartWorker.getPartInputMap()    
+    w.writeLines(1, outputPairs collect {
+      case (name, tpe) if ! usedNames.contains(rn.emit(name)) =>
+        usedNames.add(rn.emit(name))
+        s"${genCppType(tpe)} ${rn.emit(name)};"
+    })
     val extIOCacheDecs = condPartWorker.getExternalPartInputTypes(extIOtypes) map {
       case (name, tpe) => s"${genCppType(tpe)} ${rn.emit(name + condPartWorker.cacheSuffix)};"
     }
@@ -317,7 +325,8 @@ class EssentCompiler(opt: OptFlags) {
       Dependency(essent.passes.FixMulResultWidth),
       Dependency(essent.passes.DistinctTypeInstNames),
       Dependency(essent.passes.RemoveAsAsyncReset),
-      Dependency(essent.passes.ReplaceRsvdKeywords)
+      Dependency(essent.passes.ReplaceRsvdKeywords),
+      Dependency(essent.passes.ModuleToposort)
     )
 
   def compileAndEmit(circuit: Circuit) {
