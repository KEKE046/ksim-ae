FIRRTL version 1.1.0
circuit Sha256Wishbone :
  module ShiftRegister :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip input : UInt<32>, flip enable : UInt<1>, flip rev : UInt<1>, flip cyc : UInt<1>, flip tap : UInt<1>, output : UInt<32>[16]}

    reg reg : UInt<32>[16], clock with :
      reset => (UInt<1>("h0"), reg) @[ShiftRegister.scala 34:18]
    when io.enable : @[ShiftRegister.scala 36:22]
      when io.rev : @[ShiftRegister.scala 37:23]
        reg[0] <= reg[1] @[ShiftRegister.scala 39:24]
        reg[1] <= reg[2] @[ShiftRegister.scala 39:24]
        reg[2] <= reg[3] @[ShiftRegister.scala 39:24]
        reg[3] <= reg[4] @[ShiftRegister.scala 39:24]
        reg[4] <= reg[5] @[ShiftRegister.scala 39:24]
        reg[5] <= reg[6] @[ShiftRegister.scala 39:24]
        reg[6] <= reg[7] @[ShiftRegister.scala 39:24]
        reg[7] <= reg[8] @[ShiftRegister.scala 39:24]
        reg[8] <= reg[9] @[ShiftRegister.scala 39:24]
        reg[9] <= reg[10] @[ShiftRegister.scala 39:24]
        reg[10] <= reg[11] @[ShiftRegister.scala 39:24]
        reg[11] <= reg[12] @[ShiftRegister.scala 39:24]
        reg[12] <= reg[13] @[ShiftRegister.scala 39:24]
        reg[13] <= reg[14] @[ShiftRegister.scala 39:24]
        reg[14] <= reg[15] @[ShiftRegister.scala 39:24]
        node _reg_15_T = mux(io.tap, UInt<4>("hf"), UInt<4>("hf")) @[ShiftRegister.scala 42:36]
        reg[15] <= reg[_reg_15_T] @[ShiftRegister.scala 42:26]
      else :
        reg[1] <= reg[0] @[ShiftRegister.scala 45:26]
        reg[2] <= reg[1] @[ShiftRegister.scala 45:26]
        reg[3] <= reg[2] @[ShiftRegister.scala 45:26]
        reg[4] <= reg[3] @[ShiftRegister.scala 45:26]
        reg[5] <= reg[4] @[ShiftRegister.scala 45:26]
        reg[6] <= reg[5] @[ShiftRegister.scala 45:26]
        reg[7] <= reg[6] @[ShiftRegister.scala 45:26]
        reg[8] <= reg[7] @[ShiftRegister.scala 45:26]
        reg[9] <= reg[8] @[ShiftRegister.scala 45:26]
        reg[10] <= reg[9] @[ShiftRegister.scala 45:26]
        reg[11] <= reg[10] @[ShiftRegister.scala 45:26]
        reg[12] <= reg[11] @[ShiftRegister.scala 45:26]
        reg[13] <= reg[12] @[ShiftRegister.scala 45:26]
        reg[14] <= reg[13] @[ShiftRegister.scala 45:26]
        reg[15] <= reg[14] @[ShiftRegister.scala 45:26]
        when io.cyc : @[ShiftRegister.scala 48:27]
          node _T = mux(io.tap, UInt<4>("hf"), UInt<4>("hf")) @[ShiftRegister.scala 48:36]
          reg[_T] <= reg[15] @[ShiftRegister.scala 48:62]
        else :
          reg[0] <= io.input @[ShiftRegister.scala 49:37]
    io.output <= reg @[ShiftRegister.scala 53:15]

  module MessageScheduleArray :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip first : UInt<1>, flip shiftIn : UInt<1>, flip wordIn : UInt<32>, wOut : UInt<32>}

    reg iReg : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[MessageScheduleArray.scala 32:23]
    wire i : UInt<6> @[MessageScheduleArray.scala 33:17]
    wire outWire : UInt<32> @[MessageScheduleArray.scala 35:23]
    reg out : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MessageScheduleArray.scala 36:22]
    io.wOut <= out @[MessageScheduleArray.scala 37:13]
    out <= outWire @[MessageScheduleArray.scala 38:9]
    when io.first : @[MessageScheduleArray.scala 40:21]
      i <= UInt<1>("h0") @[MessageScheduleArray.scala 41:11]
      iReg <= UInt<1>("h0") @[MessageScheduleArray.scala 42:14]
    else :
      when io.shiftIn : @[MessageScheduleArray.scala 43:30]
        node _i_T = add(iReg, UInt<1>("h1")) @[MessageScheduleArray.scala 44:19]
        node _i_T_1 = tail(_i_T, 1) @[MessageScheduleArray.scala 44:19]
        i <= _i_T_1 @[MessageScheduleArray.scala 44:11]
        node _iReg_T = add(iReg, UInt<1>("h1")) @[MessageScheduleArray.scala 45:22]
        node _iReg_T_1 = tail(_iReg_T, 1) @[MessageScheduleArray.scala 45:22]
        iReg <= _iReg_T_1 @[MessageScheduleArray.scala 45:14]
      else :
        i <= iReg @[MessageScheduleArray.scala 47:11]
    inst shreg of ShiftRegister @[MessageScheduleArray.scala 50:23]
    shreg.clock <= clock
    shreg.reset <= reset
    shreg.io.rev <= UInt<1>("h0") @[MessageScheduleArray.scala 51:18]
    shreg.io.cyc <= UInt<1>("h0") @[MessageScheduleArray.scala 52:18]
    shreg.io.tap <= UInt<1>("h0") @[MessageScheduleArray.scala 53:18]
    shreg.io.enable <= io.shiftIn @[MessageScheduleArray.scala 55:21]
    shreg.io.input <= outWire @[MessageScheduleArray.scala 56:20]
    outWire <= UInt<1>("h0") @[MessageScheduleArray.scala 58:13]
    when io.shiftIn : @[MessageScheduleArray.scala 59:23]
      node _T = lt(i, UInt<5>("h10")) @[MessageScheduleArray.scala 60:17]
      when _T : @[MessageScheduleArray.scala 60:25]
        outWire <= io.wordIn @[MessageScheduleArray.scala 61:21]
      else :
        node _s0_T = bits(shreg.io.output[14], 6, 0) @[RotateLeft.scala 24:25]
        node _s0_T_1 = shr(shreg.io.output[14], 7) @[RotateLeft.scala 24:48]
        node _s0_T_2 = cat(_s0_T, _s0_T_1) @[RotateLeft.scala 24:38]
        node _s0_T_3 = bits(shreg.io.output[14], 17, 0) @[RotateLeft.scala 24:25]
        node _s0_T_4 = shr(shreg.io.output[14], 18) @[RotateLeft.scala 24:48]
        node _s0_T_5 = cat(_s0_T_3, _s0_T_4) @[RotateLeft.scala 24:38]
        node _s0_T_6 = xor(_s0_T_2, _s0_T_5) @[MessageScheduleArray.scala 63:58]
        node _s0_T_7 = shr(shreg.io.output[14], 3) @[MessageScheduleArray.scala 63:120]
        node s0 = xor(_s0_T_6, _s0_T_7) @[MessageScheduleArray.scala 63:97]
        node _s1_T = bits(shreg.io.output[1], 16, 0) @[RotateLeft.scala 24:25]
        node _s1_T_1 = shr(shreg.io.output[1], 17) @[RotateLeft.scala 24:48]
        node _s1_T_2 = cat(_s1_T, _s1_T_1) @[RotateLeft.scala 24:38]
        node _s1_T_3 = bits(shreg.io.output[1], 18, 0) @[RotateLeft.scala 24:25]
        node _s1_T_4 = shr(shreg.io.output[1], 19) @[RotateLeft.scala 24:48]
        node _s1_T_5 = cat(_s1_T_3, _s1_T_4) @[RotateLeft.scala 24:38]
        node _s1_T_6 = xor(_s1_T_2, _s1_T_5) @[MessageScheduleArray.scala 64:58]
        node _s1_T_7 = shr(shreg.io.output[1], 10) @[MessageScheduleArray.scala 64:118]
        node s1 = xor(_s1_T_6, _s1_T_7) @[MessageScheduleArray.scala 64:96]
        node _outWire_T = add(shreg.io.output[15], s0) @[MessageScheduleArray.scala 65:44]
        node _outWire_T_1 = tail(_outWire_T, 1) @[MessageScheduleArray.scala 65:44]
        node _outWire_T_2 = add(_outWire_T_1, shreg.io.output[6]) @[MessageScheduleArray.scala 65:49]
        node _outWire_T_3 = tail(_outWire_T_2, 1) @[MessageScheduleArray.scala 65:49]
        node _outWire_T_4 = add(_outWire_T_3, s1) @[MessageScheduleArray.scala 65:70]
        node _outWire_T_5 = tail(_outWire_T_4, 1) @[MessageScheduleArray.scala 65:70]
        outWire <= _outWire_T_5 @[MessageScheduleArray.scala 65:21]


  module CompressionFunction :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip first : UInt<1>, flip newChunk : UInt<1>, flip shiftIn : UInt<1>, flip wordIn : UInt<32>, valid : UInt<1>, out : UInt<32>[8]}

    reg valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CompressionFunction.scala 32:24]
    io.valid <= valid @[CompressionFunction.scala 33:14]
    reg i : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[CompressionFunction.scala 35:20]
    wire _hash_val_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _hash_val_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _hash_val_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _hash_val_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _hash_val_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _hash_val_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _hash_val_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _hash_val_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _hash_val_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg hash_val : UInt<32>[8], clock with :
      reset => (reset, _hash_val_WIRE) @[CompressionFunction.scala 37:27]
    io.out <= hash_val @[CompressionFunction.scala 38:12]
    wire _a_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _a_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _a_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _a_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _a_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _a_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _a_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _a_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _a_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg a : UInt<32>, clock with :
      reset => (reset, _a_WIRE[0]) @[CompressionFunction.scala 40:20]
    wire _b_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _b_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _b_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _b_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _b_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _b_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _b_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _b_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _b_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg b : UInt<32>, clock with :
      reset => (reset, _b_WIRE[1]) @[CompressionFunction.scala 41:20]
    wire _c_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _c_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _c_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _c_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _c_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _c_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _c_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _c_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _c_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg c : UInt<32>, clock with :
      reset => (reset, _c_WIRE[2]) @[CompressionFunction.scala 42:20]
    wire _d_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _d_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _d_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _d_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _d_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _d_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _d_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _d_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _d_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg d : UInt<32>, clock with :
      reset => (reset, _d_WIRE[3]) @[CompressionFunction.scala 43:20]
    wire _e_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _e_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _e_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _e_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _e_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _e_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _e_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _e_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _e_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg e : UInt<32>, clock with :
      reset => (reset, _e_WIRE[4]) @[CompressionFunction.scala 44:20]
    wire _f_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _f_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _f_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _f_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _f_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _f_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _f_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _f_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _f_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg f : UInt<32>, clock with :
      reset => (reset, _f_WIRE[5]) @[CompressionFunction.scala 45:20]
    wire _g_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _g_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _g_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _g_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _g_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _g_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _g_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _g_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _g_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg g : UInt<32>, clock with :
      reset => (reset, _g_WIRE[6]) @[CompressionFunction.scala 46:20]
    wire _h_WIRE : UInt<32>[8] @[Constants.scala 21:16]
    _h_WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
    _h_WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
    _h_WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
    _h_WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
    _h_WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
    _h_WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
    _h_WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
    _h_WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
    reg h : UInt<32>, clock with :
      reset => (reset, _h_WIRE[7]) @[CompressionFunction.scala 47:20]
    inst messageScheduleArray of MessageScheduleArray @[CompressionFunction.scala 49:38]
    messageScheduleArray.clock <= clock
    messageScheduleArray.reset <= reset
    node _messageScheduleArray_io_first_T = or(io.first, io.newChunk) @[CompressionFunction.scala 50:47]
    messageScheduleArray.io.first <= _messageScheduleArray_io_first_T @[CompressionFunction.scala 50:35]
    messageScheduleArray.io.shiftIn <= io.shiftIn @[CompressionFunction.scala 51:37]
    messageScheduleArray.io.wordIn <= io.wordIn @[CompressionFunction.scala 52:36]
    reg first : UInt<1>, clock with :
      reset => (UInt<1>("h0"), first) @[CompressionFunction.scala 55:24]
    first <= io.first @[CompressionFunction.scala 55:24]
    reg newChunk : UInt<1>, clock with :
      reset => (UInt<1>("h0"), newChunk) @[CompressionFunction.scala 56:27]
    newChunk <= io.newChunk @[CompressionFunction.scala 56:27]
    reg shiftIn : UInt<1>, clock with :
      reset => (UInt<1>("h0"), shiftIn) @[CompressionFunction.scala 57:26]
    shiftIn <= io.shiftIn @[CompressionFunction.scala 57:26]
    node _T = or(io.first, io.newChunk) @[CompressionFunction.scala 59:20]
    when _T : @[CompressionFunction.scala 59:35]
      valid <= UInt<1>("h0") @[CompressionFunction.scala 60:15]
      i <= UInt<1>("h0") @[CompressionFunction.scala 61:11]
    when io.first : @[CompressionFunction.scala 64:21]
      wire _a_WIRE_1 : UInt<32>[8] @[Constants.scala 21:16]
      _a_WIRE_1[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _a_WIRE_1[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _a_WIRE_1[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _a_WIRE_1[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _a_WIRE_1[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _a_WIRE_1[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _a_WIRE_1[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _a_WIRE_1[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      a <= _a_WIRE_1[0] @[CompressionFunction.scala 65:11]
      wire _b_WIRE_1 : UInt<32>[8] @[Constants.scala 21:16]
      _b_WIRE_1[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _b_WIRE_1[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _b_WIRE_1[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _b_WIRE_1[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _b_WIRE_1[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _b_WIRE_1[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _b_WIRE_1[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _b_WIRE_1[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      b <= _b_WIRE_1[1] @[CompressionFunction.scala 66:11]
      wire _c_WIRE_1 : UInt<32>[8] @[Constants.scala 21:16]
      _c_WIRE_1[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _c_WIRE_1[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _c_WIRE_1[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _c_WIRE_1[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _c_WIRE_1[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _c_WIRE_1[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _c_WIRE_1[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _c_WIRE_1[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      c <= _c_WIRE_1[2] @[CompressionFunction.scala 67:11]
      wire _d_WIRE_1 : UInt<32>[8] @[Constants.scala 21:16]
      _d_WIRE_1[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _d_WIRE_1[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _d_WIRE_1[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _d_WIRE_1[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _d_WIRE_1[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _d_WIRE_1[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _d_WIRE_1[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _d_WIRE_1[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      d <= _d_WIRE_1[3] @[CompressionFunction.scala 68:11]
      wire _e_WIRE_1 : UInt<32>[8] @[Constants.scala 21:16]
      _e_WIRE_1[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _e_WIRE_1[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _e_WIRE_1[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _e_WIRE_1[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _e_WIRE_1[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _e_WIRE_1[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _e_WIRE_1[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _e_WIRE_1[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      e <= _e_WIRE_1[4] @[CompressionFunction.scala 69:11]
      wire _f_WIRE_1 : UInt<32>[8] @[Constants.scala 21:16]
      _f_WIRE_1[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _f_WIRE_1[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _f_WIRE_1[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _f_WIRE_1[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _f_WIRE_1[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _f_WIRE_1[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _f_WIRE_1[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _f_WIRE_1[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      f <= _f_WIRE_1[5] @[CompressionFunction.scala 70:11]
      wire _g_WIRE_1 : UInt<32>[8] @[Constants.scala 21:16]
      _g_WIRE_1[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _g_WIRE_1[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _g_WIRE_1[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _g_WIRE_1[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _g_WIRE_1[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _g_WIRE_1[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _g_WIRE_1[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _g_WIRE_1[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      g <= _g_WIRE_1[6] @[CompressionFunction.scala 71:11]
      wire _h_WIRE_1 : UInt<32>[8] @[Constants.scala 21:16]
      _h_WIRE_1[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _h_WIRE_1[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _h_WIRE_1[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _h_WIRE_1[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _h_WIRE_1[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _h_WIRE_1[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _h_WIRE_1[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _h_WIRE_1[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      h <= _h_WIRE_1[7] @[CompressionFunction.scala 72:11]
      wire _WIRE : UInt<32>[8] @[Constants.scala 21:16]
      _WIRE[0] <= UInt<32>("h6a09e667") @[Constants.scala 21:16]
      _WIRE[1] <= UInt<32>("hbb67ae85") @[Constants.scala 21:16]
      _WIRE[2] <= UInt<32>("h3c6ef372") @[Constants.scala 21:16]
      _WIRE[3] <= UInt<32>("ha54ff53a") @[Constants.scala 21:16]
      _WIRE[4] <= UInt<32>("h510e527f") @[Constants.scala 21:16]
      _WIRE[5] <= UInt<32>("h9b05688c") @[Constants.scala 21:16]
      _WIRE[6] <= UInt<32>("h1f83d9ab") @[Constants.scala 21:16]
      _WIRE[7] <= UInt<32>("h5be0cd19") @[Constants.scala 21:16]
      hash_val <= _WIRE @[CompressionFunction.scala 73:18]
    else :
      when io.newChunk : @[CompressionFunction.scala 75:31]
        a <= hash_val[0] @[CompressionFunction.scala 76:11]
        b <= hash_val[1] @[CompressionFunction.scala 77:11]
        c <= hash_val[2] @[CompressionFunction.scala 78:11]
        d <= hash_val[3] @[CompressionFunction.scala 79:11]
        e <= hash_val[4] @[CompressionFunction.scala 80:11]
        f <= hash_val[5] @[CompressionFunction.scala 81:11]
        g <= hash_val[6] @[CompressionFunction.scala 82:11]
        h <= hash_val[7] @[CompressionFunction.scala 83:11]
    when shiftIn : @[CompressionFunction.scala 86:20]
      node _S1_T = bits(e, 5, 0) @[RotateLeft.scala 24:25]
      node _S1_T_1 = shr(e, 6) @[RotateLeft.scala 24:48]
      node _S1_T_2 = cat(_S1_T, _S1_T_1) @[RotateLeft.scala 24:38]
      node _S1_T_3 = bits(e, 10, 0) @[RotateLeft.scala 24:25]
      node _S1_T_4 = shr(e, 11) @[RotateLeft.scala 24:48]
      node _S1_T_5 = cat(_S1_T_3, _S1_T_4) @[RotateLeft.scala 24:38]
      node _S1_T_6 = xor(_S1_T_2, _S1_T_5) @[CompressionFunction.scala 89:36]
      node _S1_T_7 = bits(e, 24, 0) @[RotateLeft.scala 24:25]
      node _S1_T_8 = shr(e, 25) @[RotateLeft.scala 24:48]
      node _S1_T_9 = cat(_S1_T_7, _S1_T_8) @[RotateLeft.scala 24:38]
      node S1 = xor(_S1_T_6, _S1_T_9) @[CompressionFunction.scala 89:57]
      node _ch_T = and(e, f) @[CompressionFunction.scala 90:21]
      node _ch_T_1 = not(e) @[CompressionFunction.scala 90:30]
      node _ch_T_2 = and(_ch_T_1, g) @[CompressionFunction.scala 90:41]
      node ch = xor(_ch_T, _ch_T_2) @[CompressionFunction.scala 90:26]
      node _temp1_T = add(h, S1) @[CompressionFunction.scala 91:23]
      node _temp1_T_1 = tail(_temp1_T, 1) @[CompressionFunction.scala 91:23]
      node _temp1_T_2 = add(_temp1_T_1, ch) @[CompressionFunction.scala 91:28]
      node _temp1_T_3 = tail(_temp1_T_2, 1) @[CompressionFunction.scala 91:28]
      wire _temp1_WIRE : UInt<32>[64] @[Constants.scala 24:16]
      _temp1_WIRE[0] <= UInt<32>("h428a2f98") @[Constants.scala 24:16]
      _temp1_WIRE[1] <= UInt<32>("h71374491") @[Constants.scala 24:16]
      _temp1_WIRE[2] <= UInt<32>("hb5c0fbcf") @[Constants.scala 24:16]
      _temp1_WIRE[3] <= UInt<32>("he9b5dba5") @[Constants.scala 24:16]
      _temp1_WIRE[4] <= UInt<32>("h3956c25b") @[Constants.scala 24:16]
      _temp1_WIRE[5] <= UInt<32>("h59f111f1") @[Constants.scala 24:16]
      _temp1_WIRE[6] <= UInt<32>("h923f82a4") @[Constants.scala 24:16]
      _temp1_WIRE[7] <= UInt<32>("hab1c5ed5") @[Constants.scala 24:16]
      _temp1_WIRE[8] <= UInt<32>("hd807aa98") @[Constants.scala 24:16]
      _temp1_WIRE[9] <= UInt<32>("h12835b01") @[Constants.scala 24:16]
      _temp1_WIRE[10] <= UInt<32>("h243185be") @[Constants.scala 24:16]
      _temp1_WIRE[11] <= UInt<32>("h550c7dc3") @[Constants.scala 24:16]
      _temp1_WIRE[12] <= UInt<32>("h72be5d74") @[Constants.scala 24:16]
      _temp1_WIRE[13] <= UInt<32>("h80deb1fe") @[Constants.scala 24:16]
      _temp1_WIRE[14] <= UInt<32>("h9bdc06a7") @[Constants.scala 24:16]
      _temp1_WIRE[15] <= UInt<32>("hc19bf174") @[Constants.scala 24:16]
      _temp1_WIRE[16] <= UInt<32>("he49b69c1") @[Constants.scala 24:16]
      _temp1_WIRE[17] <= UInt<32>("hefbe4786") @[Constants.scala 24:16]
      _temp1_WIRE[18] <= UInt<32>("hfc19dc6") @[Constants.scala 24:16]
      _temp1_WIRE[19] <= UInt<32>("h240ca1cc") @[Constants.scala 24:16]
      _temp1_WIRE[20] <= UInt<32>("h2de92c6f") @[Constants.scala 24:16]
      _temp1_WIRE[21] <= UInt<32>("h4a7484aa") @[Constants.scala 24:16]
      _temp1_WIRE[22] <= UInt<32>("h5cb0a9dc") @[Constants.scala 24:16]
      _temp1_WIRE[23] <= UInt<32>("h76f988da") @[Constants.scala 24:16]
      _temp1_WIRE[24] <= UInt<32>("h983e5152") @[Constants.scala 24:16]
      _temp1_WIRE[25] <= UInt<32>("ha831c66d") @[Constants.scala 24:16]
      _temp1_WIRE[26] <= UInt<32>("hb00327c8") @[Constants.scala 24:16]
      _temp1_WIRE[27] <= UInt<32>("hbf597fc7") @[Constants.scala 24:16]
      _temp1_WIRE[28] <= UInt<32>("hc6e00bf3") @[Constants.scala 24:16]
      _temp1_WIRE[29] <= UInt<32>("hd5a79147") @[Constants.scala 24:16]
      _temp1_WIRE[30] <= UInt<32>("h6ca6351") @[Constants.scala 24:16]
      _temp1_WIRE[31] <= UInt<32>("h14292967") @[Constants.scala 24:16]
      _temp1_WIRE[32] <= UInt<32>("h27b70a85") @[Constants.scala 24:16]
      _temp1_WIRE[33] <= UInt<32>("h2e1b2138") @[Constants.scala 24:16]
      _temp1_WIRE[34] <= UInt<32>("h4d2c6dfc") @[Constants.scala 24:16]
      _temp1_WIRE[35] <= UInt<32>("h53380d13") @[Constants.scala 24:16]
      _temp1_WIRE[36] <= UInt<32>("h650a7354") @[Constants.scala 24:16]
      _temp1_WIRE[37] <= UInt<32>("h766a0abb") @[Constants.scala 24:16]
      _temp1_WIRE[38] <= UInt<32>("h81c2c92e") @[Constants.scala 24:16]
      _temp1_WIRE[39] <= UInt<32>("h92722c85") @[Constants.scala 24:16]
      _temp1_WIRE[40] <= UInt<32>("ha2bfe8a1") @[Constants.scala 24:16]
      _temp1_WIRE[41] <= UInt<32>("ha81a664b") @[Constants.scala 24:16]
      _temp1_WIRE[42] <= UInt<32>("hc24b8b70") @[Constants.scala 24:16]
      _temp1_WIRE[43] <= UInt<32>("hc76c51a3") @[Constants.scala 24:16]
      _temp1_WIRE[44] <= UInt<32>("hd192e819") @[Constants.scala 24:16]
      _temp1_WIRE[45] <= UInt<32>("hd6990624") @[Constants.scala 24:16]
      _temp1_WIRE[46] <= UInt<32>("hf40e3585") @[Constants.scala 24:16]
      _temp1_WIRE[47] <= UInt<32>("h106aa070") @[Constants.scala 24:16]
      _temp1_WIRE[48] <= UInt<32>("h19a4c116") @[Constants.scala 24:16]
      _temp1_WIRE[49] <= UInt<32>("h1e376c08") @[Constants.scala 24:16]
      _temp1_WIRE[50] <= UInt<32>("h2748774c") @[Constants.scala 24:16]
      _temp1_WIRE[51] <= UInt<32>("h34b0bcb5") @[Constants.scala 24:16]
      _temp1_WIRE[52] <= UInt<32>("h391c0cb3") @[Constants.scala 24:16]
      _temp1_WIRE[53] <= UInt<32>("h4ed8aa4a") @[Constants.scala 24:16]
      _temp1_WIRE[54] <= UInt<32>("h5b9cca4f") @[Constants.scala 24:16]
      _temp1_WIRE[55] <= UInt<32>("h682e6ff3") @[Constants.scala 24:16]
      _temp1_WIRE[56] <= UInt<32>("h748f82ee") @[Constants.scala 24:16]
      _temp1_WIRE[57] <= UInt<32>("h78a5636f") @[Constants.scala 24:16]
      _temp1_WIRE[58] <= UInt<32>("h84c87814") @[Constants.scala 24:16]
      _temp1_WIRE[59] <= UInt<32>("h8cc70208") @[Constants.scala 24:16]
      _temp1_WIRE[60] <= UInt<32>("h90befffa") @[Constants.scala 24:16]
      _temp1_WIRE[61] <= UInt<32>("ha4506ceb") @[Constants.scala 24:16]
      _temp1_WIRE[62] <= UInt<32>("hbef9a3f7") @[Constants.scala 24:16]
      _temp1_WIRE[63] <= UInt<32>("hc67178f2") @[Constants.scala 24:16]
      node _temp1_T_4 = add(_temp1_T_3, _temp1_WIRE[i]) @[CompressionFunction.scala 91:33]
      node _temp1_T_5 = tail(_temp1_T_4, 1) @[CompressionFunction.scala 91:33]
      node _temp1_T_6 = add(_temp1_T_5, messageScheduleArray.io.wOut) @[CompressionFunction.scala 91:69]
      node temp1 = tail(_temp1_T_6, 1) @[CompressionFunction.scala 91:69]
      node _S0_T = bits(a, 1, 0) @[RotateLeft.scala 24:25]
      node _S0_T_1 = shr(a, 2) @[RotateLeft.scala 24:48]
      node _S0_T_2 = cat(_S0_T, _S0_T_1) @[RotateLeft.scala 24:38]
      node _S0_T_3 = bits(a, 12, 0) @[RotateLeft.scala 24:25]
      node _S0_T_4 = shr(a, 13) @[RotateLeft.scala 24:48]
      node _S0_T_5 = cat(_S0_T_3, _S0_T_4) @[RotateLeft.scala 24:38]
      node _S0_T_6 = xor(_S0_T_2, _S0_T_5) @[CompressionFunction.scala 92:36]
      node _S0_T_7 = bits(a, 21, 0) @[RotateLeft.scala 24:25]
      node _S0_T_8 = shr(a, 22) @[RotateLeft.scala 24:48]
      node _S0_T_9 = cat(_S0_T_7, _S0_T_8) @[RotateLeft.scala 24:38]
      node S0 = xor(_S0_T_6, _S0_T_9) @[CompressionFunction.scala 92:57]
      node _maj_T = and(a, b) @[CompressionFunction.scala 93:22]
      node _maj_T_1 = and(a, c) @[CompressionFunction.scala 93:32]
      node _maj_T_2 = xor(_maj_T, _maj_T_1) @[CompressionFunction.scala 93:27]
      node _maj_T_3 = and(b, c) @[CompressionFunction.scala 93:42]
      node maj = xor(_maj_T_2, _maj_T_3) @[CompressionFunction.scala 93:37]
      node _temp2_T = add(S0, maj) @[CompressionFunction.scala 94:24]
      node temp2 = tail(_temp2_T, 1) @[CompressionFunction.scala 94:24]
      h <= g @[CompressionFunction.scala 96:11]
      g <= f @[CompressionFunction.scala 97:11]
      f <= e @[CompressionFunction.scala 98:11]
      node _e_T = add(d, temp1) @[CompressionFunction.scala 99:16]
      node _e_T_1 = tail(_e_T, 1) @[CompressionFunction.scala 99:16]
      e <= _e_T_1 @[CompressionFunction.scala 99:11]
      d <= c @[CompressionFunction.scala 100:11]
      c <= b @[CompressionFunction.scala 101:11]
      b <= a @[CompressionFunction.scala 102:11]
      node _a_T = add(temp1, temp2) @[CompressionFunction.scala 103:20]
      node _a_T_1 = tail(_a_T, 1) @[CompressionFunction.scala 103:20]
      a <= _a_T_1 @[CompressionFunction.scala 103:11]
      node _i_T = add(i, UInt<1>("h1")) @[CompressionFunction.scala 105:20]
      node _i_T_1 = tail(_i_T, 1) @[CompressionFunction.scala 105:20]
      i <= _i_T_1 @[CompressionFunction.scala 105:11]
      node _T_1 = eq(i, UInt<6>("h3f")) @[CompressionFunction.scala 107:17]
      when _T_1 : @[CompressionFunction.scala 107:27]
        valid <= UInt<1>("h1") @[CompressionFunction.scala 108:19]
        node _a_T_2 = add(temp1, temp2) @[CompressionFunction.scala 110:24]
        node _a_T_3 = tail(_a_T_2, 1) @[CompressionFunction.scala 110:24]
        node _a_T_4 = add(_a_T_3, hash_val[0]) @[CompressionFunction.scala 110:32]
        node _a_T_5 = tail(_a_T_4, 1) @[CompressionFunction.scala 110:32]
        a <= _a_T_5 @[CompressionFunction.scala 110:15]
        node _b_T = add(a, hash_val[1]) @[CompressionFunction.scala 111:20]
        node _b_T_1 = tail(_b_T, 1) @[CompressionFunction.scala 111:20]
        b <= _b_T_1 @[CompressionFunction.scala 111:15]
        node _c_T = add(b, hash_val[2]) @[CompressionFunction.scala 112:20]
        node _c_T_1 = tail(_c_T, 1) @[CompressionFunction.scala 112:20]
        c <= _c_T_1 @[CompressionFunction.scala 112:15]
        node _d_T = add(c, hash_val[3]) @[CompressionFunction.scala 113:20]
        node _d_T_1 = tail(_d_T, 1) @[CompressionFunction.scala 113:20]
        d <= _d_T_1 @[CompressionFunction.scala 113:15]
        node _e_T_2 = add(d, temp1) @[CompressionFunction.scala 114:20]
        node _e_T_3 = tail(_e_T_2, 1) @[CompressionFunction.scala 114:20]
        node _e_T_4 = add(_e_T_3, hash_val[4]) @[CompressionFunction.scala 114:28]
        node _e_T_5 = tail(_e_T_4, 1) @[CompressionFunction.scala 114:28]
        e <= _e_T_5 @[CompressionFunction.scala 114:15]
        node _f_T = add(e, hash_val[5]) @[CompressionFunction.scala 115:20]
        node _f_T_1 = tail(_f_T, 1) @[CompressionFunction.scala 115:20]
        f <= _f_T_1 @[CompressionFunction.scala 115:15]
        node _g_T = add(f, hash_val[6]) @[CompressionFunction.scala 116:20]
        node _g_T_1 = tail(_g_T, 1) @[CompressionFunction.scala 116:20]
        g <= _g_T_1 @[CompressionFunction.scala 116:15]
        node _h_T = add(g, hash_val[7]) @[CompressionFunction.scala 117:20]
        node _h_T_1 = tail(_h_T, 1) @[CompressionFunction.scala 117:20]
        h <= _h_T_1 @[CompressionFunction.scala 117:15]
        node _hash_val_0_T = add(hash_val[0], temp1) @[CompressionFunction.scala 119:40]
        node _hash_val_0_T_1 = tail(_hash_val_0_T, 1) @[CompressionFunction.scala 119:40]
        node _hash_val_0_T_2 = add(_hash_val_0_T_1, temp2) @[CompressionFunction.scala 119:48]
        node _hash_val_0_T_3 = tail(_hash_val_0_T_2, 1) @[CompressionFunction.scala 119:48]
        hash_val[0] <= _hash_val_0_T_3 @[CompressionFunction.scala 119:25]
        node _hash_val_1_T = add(hash_val[1], a) @[CompressionFunction.scala 120:40]
        node _hash_val_1_T_1 = tail(_hash_val_1_T, 1) @[CompressionFunction.scala 120:40]
        hash_val[1] <= _hash_val_1_T_1 @[CompressionFunction.scala 120:25]
        node _hash_val_2_T = add(hash_val[2], b) @[CompressionFunction.scala 121:40]
        node _hash_val_2_T_1 = tail(_hash_val_2_T, 1) @[CompressionFunction.scala 121:40]
        hash_val[2] <= _hash_val_2_T_1 @[CompressionFunction.scala 121:25]
        node _hash_val_3_T = add(hash_val[3], c) @[CompressionFunction.scala 122:40]
        node _hash_val_3_T_1 = tail(_hash_val_3_T, 1) @[CompressionFunction.scala 122:40]
        hash_val[3] <= _hash_val_3_T_1 @[CompressionFunction.scala 122:25]
        node _hash_val_4_T = add(hash_val[4], d) @[CompressionFunction.scala 123:40]
        node _hash_val_4_T_1 = tail(_hash_val_4_T, 1) @[CompressionFunction.scala 123:40]
        node _hash_val_4_T_2 = add(_hash_val_4_T_1, temp1) @[CompressionFunction.scala 123:44]
        node _hash_val_4_T_3 = tail(_hash_val_4_T_2, 1) @[CompressionFunction.scala 123:44]
        hash_val[4] <= _hash_val_4_T_3 @[CompressionFunction.scala 123:25]
        node _hash_val_5_T = add(hash_val[5], e) @[CompressionFunction.scala 124:40]
        node _hash_val_5_T_1 = tail(_hash_val_5_T, 1) @[CompressionFunction.scala 124:40]
        hash_val[5] <= _hash_val_5_T_1 @[CompressionFunction.scala 124:25]
        node _hash_val_6_T = add(hash_val[6], f) @[CompressionFunction.scala 125:40]
        node _hash_val_6_T_1 = tail(_hash_val_6_T, 1) @[CompressionFunction.scala 125:40]
        hash_val[6] <= _hash_val_6_T_1 @[CompressionFunction.scala 125:25]
        node _hash_val_7_T = add(hash_val[7], g) @[CompressionFunction.scala 126:40]
        node _hash_val_7_T_1 = tail(_hash_val_7_T, 1) @[CompressionFunction.scala 126:40]
        hash_val[7] <= _hash_val_7_T_1 @[CompressionFunction.scala 126:25]
      else :
        valid <= UInt<1>("h0") @[CompressionFunction.scala 129:19]


  module Sha256Accel :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip first : UInt<1>, flip inputData : UInt<32>, flip inputValid : UInt<1>, inputReady : UInt<1>, outputData : UInt<32>[8], outputValid : UInt<1>}

    inst accel of CompressionFunction @[Sha256Accel.scala 35:23]
    accel.clock <= clock
    accel.reset <= reset
    io.outputData <= accel.io.out @[Sha256Accel.scala 36:19]
    io.outputValid <= accel.io.valid @[Sha256Accel.scala 37:20]
    reg first : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[Sha256Accel.scala 39:24]
    when io.first : @[Sha256Accel.scala 40:21]
      first <= UInt<1>("h1") @[Sha256Accel.scala 40:29]
    when accel.io.shiftIn : @[Sha256Accel.scala 41:29]
      first <= UInt<1>("h0") @[Sha256Accel.scala 41:37]
    reg ctr : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Sha256Accel.scala 43:22]
    node _accel_io_newChunk_T = eq(ctr, UInt<1>("h0")) @[Sha256Accel.scala 44:31]
    node _accel_io_newChunk_T_1 = and(_accel_io_newChunk_T, accel.io.shiftIn) @[Sha256Accel.scala 44:40]
    accel.io.newChunk <= _accel_io_newChunk_T_1 @[Sha256Accel.scala 44:23]
    node _accel_io_first_T = and(first, accel.io.shiftIn) @[Sha256Accel.scala 45:29]
    accel.io.first <= _accel_io_first_T @[Sha256Accel.scala 45:20]
    accel.io.shiftIn <= UInt<1>("h0") @[Sha256Accel.scala 47:22]
    accel.io.wordIn <= io.inputData @[Sha256Accel.scala 48:21]
    reg io_inputReady_REG : UInt<8>, clock with :
      reset => (UInt<1>("h0"), io_inputReady_REG) @[Sha256Accel.scala 49:30]
    io_inputReady_REG <= ctr @[Sha256Accel.scala 49:30]
    node _io_inputReady_T = lt(io_inputReady_REG, UInt<5>("h10")) @[Sha256Accel.scala 49:36]
    node _io_inputReady_T_1 = lt(ctr, UInt<5>("h10")) @[Sha256Accel.scala 49:52]
    node _io_inputReady_T_2 = and(_io_inputReady_T, _io_inputReady_T_1) @[Sha256Accel.scala 49:44]
    node _io_inputReady_T_3 = eq(io.first, UInt<1>("h0")) @[Sha256Accel.scala 49:63]
    node _io_inputReady_T_4 = and(_io_inputReady_T_2, _io_inputReady_T_3) @[Sha256Accel.scala 49:60]
    io.inputReady <= _io_inputReady_T_4 @[Sha256Accel.scala 49:19]
    node _T = geq(ctr, UInt<5>("h10")) @[Sha256Accel.scala 50:15]
    when _T : @[Sha256Accel.scala 50:24]
      io.inputReady <= UInt<1>("h0") @[Sha256Accel.scala 51:23]
      accel.io.shiftIn <= UInt<1>("h1") @[Sha256Accel.scala 52:26]
      node _ctr_T = add(ctr, UInt<1>("h1")) @[Sha256Accel.scala 54:20]
      node _ctr_T_1 = tail(_ctr_T, 1) @[Sha256Accel.scala 54:20]
      ctr <= _ctr_T_1 @[Sha256Accel.scala 54:13]
      node _T_1 = eq(ctr, UInt<6>("h3f")) @[Sha256Accel.scala 55:19]
      when _T_1 : @[Sha256Accel.scala 55:29]
        ctr <= UInt<1>("h0") @[Sha256Accel.scala 55:35]
    else :
      when io.inputValid : @[Sha256Accel.scala 56:33]
        accel.io.shiftIn <= UInt<1>("h1") @[Sha256Accel.scala 57:26]
        node _ctr_T_2 = add(ctr, UInt<1>("h1")) @[Sha256Accel.scala 58:20]
        node _ctr_T_3 = tail(_ctr_T_2, 1) @[Sha256Accel.scala 58:20]
        ctr <= _ctr_T_3 @[Sha256Accel.scala 58:13]
    when io.first : @[Sha256Accel.scala 61:21]
      ctr <= UInt<1>("h0") @[Sha256Accel.scala 61:27]


  module Sha256Wishbone :
    input clock : Clock
    input reset : UInt<1>
    output io : { bus : { flip cyc : UInt<1>, flip stb : UInt<1>, flip we : UInt<1>, flip sel : UInt<4>, flip addr : UInt<32>, flip data_wr : UInt<32>, ack : UInt<1>, err : UInt<1>, data_rd : UInt<32>}}

    reg data_rd : UInt<32>, clock with :
      reset => (UInt<1>("h0"), data_rd) @[Sha256Wishbone.scala 47:22]
    io.bus.data_rd <= data_rd @[Sha256Wishbone.scala 48:20]
    reg ack : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Sha256Wishbone.scala 50:22]
    io.bus.ack <= ack @[Sha256Wishbone.scala 51:16]
    io.bus.err <= UInt<1>("h0") @[Sha256Wishbone.scala 52:16]
    inst accel of Sha256Accel @[Sha256Wishbone.scala 54:23]
    accel.clock <= clock
    accel.reset <= reset
    accel.io.inputValid <= UInt<1>("h0") @[Sha256Wishbone.scala 56:25]
    accel.io.inputData <= io.bus.data_wr @[Sha256Wishbone.scala 57:24]
    accel.io.first <= UInt<1>("h0") @[Sha256Wishbone.scala 58:20]
    ack <= UInt<1>("h0") @[Sha256Wishbone.scala 60:9]
    node _T = and(io.bus.cyc, io.bus.stb) @[Sha256Wishbone.scala 61:21]
    node _T_1 = eq(io.bus.ack, UInt<1>("h0")) @[Sha256Wishbone.scala 61:38]
    node _T_2 = and(_T, _T_1) @[Sha256Wishbone.scala 61:35]
    when _T_2 : @[Sha256Wishbone.scala 61:51]
      data_rd <= UInt<32>("h0") @[Sha256Wishbone.scala 63:17]
      node _T_3 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 64:28]
      node _T_4 = eq(UInt<1>("h0"), _T_3) @[Sha256Wishbone.scala 64:34]
      when _T_4 : @[Sha256Wishbone.scala 64:34]
        node _data_rd_T = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 65:70]
        node _data_rd_T_1 = bits(accel.io.inputReady, 0, 0) @[Sha256Wishbone.scala 65:94]
        node data_rd_lo = cat(_data_rd_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
        node data_rd_hi = cat(UInt<29>("h0"), _data_rd_T) @[Cat.scala 33:92]
        node _data_rd_T_2 = cat(data_rd_hi, data_rd_lo) @[Cat.scala 33:92]
        data_rd <= _data_rd_T_2 @[Sha256Wishbone.scala 65:32]
      else :
        node _T_5 = eq(UInt<3>("h4"), _T_3) @[Sha256Wishbone.scala 64:34]
        when _T_5 : @[Sha256Wishbone.scala 64:34]
          node _data_rd_T_3 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 69:59]
          node _data_rd_T_4 = mux(_data_rd_T_3, accel.io.outputData[0], UInt<32>("h0")) @[Sha256Wishbone.scala 69:38]
          data_rd <= _data_rd_T_4 @[Sha256Wishbone.scala 69:32]
        else :
          node _T_6 = eq(UInt<3>("h5"), _T_3) @[Sha256Wishbone.scala 64:34]
          when _T_6 : @[Sha256Wishbone.scala 64:34]
            node _data_rd_T_5 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 70:59]
            node _data_rd_T_6 = mux(_data_rd_T_5, accel.io.outputData[1], UInt<32>("h0")) @[Sha256Wishbone.scala 70:38]
            data_rd <= _data_rd_T_6 @[Sha256Wishbone.scala 70:32]
          else :
            node _T_7 = eq(UInt<3>("h6"), _T_3) @[Sha256Wishbone.scala 64:34]
            when _T_7 : @[Sha256Wishbone.scala 64:34]
              node _data_rd_T_7 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 71:59]
              node _data_rd_T_8 = mux(_data_rd_T_7, accel.io.outputData[2], UInt<32>("h0")) @[Sha256Wishbone.scala 71:38]
              data_rd <= _data_rd_T_8 @[Sha256Wishbone.scala 71:32]
            else :
              node _T_8 = eq(UInt<3>("h7"), _T_3) @[Sha256Wishbone.scala 64:34]
              when _T_8 : @[Sha256Wishbone.scala 64:34]
                node _data_rd_T_9 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 72:59]
                node _data_rd_T_10 = mux(_data_rd_T_9, accel.io.outputData[3], UInt<32>("h0")) @[Sha256Wishbone.scala 72:38]
                data_rd <= _data_rd_T_10 @[Sha256Wishbone.scala 72:32]
              else :
                node _T_9 = eq(UInt<4>("h8"), _T_3) @[Sha256Wishbone.scala 64:34]
                when _T_9 : @[Sha256Wishbone.scala 64:34]
                  node _data_rd_T_11 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 73:59]
                  node _data_rd_T_12 = mux(_data_rd_T_11, accel.io.outputData[4], UInt<32>("h0")) @[Sha256Wishbone.scala 73:38]
                  data_rd <= _data_rd_T_12 @[Sha256Wishbone.scala 73:32]
                else :
                  node _T_10 = eq(UInt<4>("h9"), _T_3) @[Sha256Wishbone.scala 64:34]
                  when _T_10 : @[Sha256Wishbone.scala 64:34]
                    node _data_rd_T_13 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 74:59]
                    node _data_rd_T_14 = mux(_data_rd_T_13, accel.io.outputData[5], UInt<32>("h0")) @[Sha256Wishbone.scala 74:38]
                    data_rd <= _data_rd_T_14 @[Sha256Wishbone.scala 74:32]
                  else :
                    node _T_11 = eq(UInt<4>("ha"), _T_3) @[Sha256Wishbone.scala 64:34]
                    when _T_11 : @[Sha256Wishbone.scala 64:34]
                      node _data_rd_T_15 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 75:59]
                      node _data_rd_T_16 = mux(_data_rd_T_15, accel.io.outputData[6], UInt<32>("h0")) @[Sha256Wishbone.scala 75:38]
                      data_rd <= _data_rd_T_16 @[Sha256Wishbone.scala 75:32]
                    else :
                      node _T_12 = eq(UInt<4>("hb"), _T_3) @[Sha256Wishbone.scala 64:34]
                      when _T_12 : @[Sha256Wishbone.scala 64:34]
                        node _data_rd_T_17 = bits(accel.io.outputValid, 0, 0) @[Sha256Wishbone.scala 76:59]
                        node _data_rd_T_18 = mux(_data_rd_T_17, accel.io.outputData[7], UInt<32>("h0")) @[Sha256Wishbone.scala 76:38]
                        data_rd <= _data_rd_T_18 @[Sha256Wishbone.scala 76:32]
      node _T_13 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 80:31]
      node _T_14 = eq(_T_13, UInt<5>("h14")) @[Sha256Wishbone.scala 80:44]
      when _T_14 : @[Sha256Wishbone.scala 80:60]
        data_rd <= UInt<32>("h32414853") @[Sha256Wishbone.scala 81:25]
      node _T_15 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 80:31]
      node _T_16 = eq(_T_15, UInt<5>("h15")) @[Sha256Wishbone.scala 80:44]
      when _T_16 : @[Sha256Wishbone.scala 80:60]
        data_rd <= UInt<32>("h43203635") @[Sha256Wishbone.scala 81:25]
      node _T_17 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 80:31]
      node _T_18 = eq(_T_17, UInt<5>("h16")) @[Sha256Wishbone.scala 80:44]
      when _T_18 : @[Sha256Wishbone.scala 80:60]
        data_rd <= UInt<32>("h65726f") @[Sha256Wishbone.scala 81:25]
      ack <= UInt<1>("h1") @[Sha256Wishbone.scala 85:13]
      when io.bus.we : @[Sha256Wishbone.scala 86:25]
        node _T_19 = shr(io.bus.addr, 2) @[Sha256Wishbone.scala 88:32]
        node _T_20 = eq(UInt<1>("h0"), _T_19) @[Sha256Wishbone.scala 88:38]
        when _T_20 : @[Sha256Wishbone.scala 88:38]
          node _T_21 = bits(io.bus.sel, 0, 0) @[Sha256Wishbone.scala 90:37]
          node _T_22 = bits(io.bus.data_wr, 0, 0) @[Sha256Wishbone.scala 90:58]
          node _T_23 = and(_T_21, _T_22) @[Sha256Wishbone.scala 90:41]
          when _T_23 : @[Sha256Wishbone.scala 90:63]
            accel.io.first <= UInt<1>("h1") @[Sha256Wishbone.scala 91:40]
        else :
          node _T_24 = eq(UInt<1>("h1"), _T_19) @[Sha256Wishbone.scala 88:38]
          when _T_24 : @[Sha256Wishbone.scala 88:38]
            when accel.io.inputReady : @[Sha256Wishbone.scala 97:48]
              accel.io.inputValid <= UInt<1>("h1") @[Sha256Wishbone.scala 98:45]
            else :
              ack <= UInt<1>("h0") @[Sha256Wishbone.scala 101:29]

